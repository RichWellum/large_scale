---
- name: Restart fake neutron-openvswitch-agent container
  vars:
    service_name: "neutron-openvswitch-agent"
    service: "{{ neutron_services[service_name] }}"
    config_json: "{{ neutron_config_jsons.results|selectattr('item.key', 'equalto', service_name)|first }}"
    neutron_conf: "{{ neutron_confs.results|selectattr('item.key', 'equalto', service_name)|first }}"
    neutron_ml2_conf: "{{ neutron_ml2_confs.results|selectattr('item.key', 'equalto', service_name)|first }}"
    policy_json: "{{ policy_jsons.results|selectattr('item.key', 'equalto', service_name)|first }}"
    neutron_openvswitch_agent_container: "{{ check_neutron_containers.results|selectattr('item.key', 'equalto', service_name)|first }}"
  become: true
  docker_container:
    action: "recreate_or_restart_container"
    common_options: "{{ docker_common_options }}"
    name: "{{ service.container_name }}"
    image: "{{ service.image }}"
    volumes: "{{ service.volumes }}"
    dimensions: "{{ service.dimensions }}"
    privileged: "{{ service.privileged | default(False) }}"
  with_sequence: "start=1 end={{ num_nova_fake_per_node }}"

- name: detect api_interface_name variable
  vars:
    ansible_interface_name: "ansible_{{ item.replace('-', '_') }}"
    api_interface_address: "{{ hostvars[inventory_hostname]['nodepool']['private_ipv4'] }}"
  set_fact:
      api_interface_name: "{{ item }}"
      api_interface_address: "{{ api_interface_address }}"
  when:
    - hostvars[inventory_hostname][ansible_interface_name]['ipv4'] is defined
    - hostvars[inventory_hostname][ansible_interface_name]['ipv4']['address'] == api_interface_address
  with_items: "{{ ansible_interfaces }}"
  delegate_to: "primary"
